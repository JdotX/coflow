akka {

  daemonic = on

  jvm-exit-on-fatal-error = on

  loggers = ["akka.event.slf4j.Slf4jLogger"]

  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  actor {

    provider = "akka.remote.RemoteActorRefProvider"

    debug {
      receive = on
      autoreceive = on
      lifecycle = on
      fsm = on
      event-stream = on
    }

    log-dead-letters-during-shutdown = off

    default-dispatcher.throughput = 15

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "coflow.CoflowMessage" = kryo
      "java.io.Serializable" = java
    }

    kryo {
      type = "graph"
      idstrategy = "incremental"
      serializer-pool-size = 32
      buffer-size = 65536
      use-manifests = false
      implicit-registration-logging = false
      kryo-trace = false

      classes = [
        "coflow.Flow",
        "[Lcoflow.Flow;",
        "coflow.SlaveCoflows",
        "coflow.FlowPriorityQueue",
        "coflow.ClientCoflows",
        "scala.collection.immutable.Map$EmptyMap$",
        "scala.collection.immutable.Map$Map1",
        "scala.collection.immutable.Map$Map2",
        "scala.collection.immutable.Map$Map3",
        "scala.collection.immutable.Map$Map4",
      ]
    }
  }

  remote {
    log-remote-lifecycle-events = off
    enabled-transports = ["akka.remote.netty.tcp"]
    netty {
      write-timeout = 30
      tcp {
        port = 0
        transport-class = "akka.remote.transport.netty.NettyTransport"
        tcp-nodelay = on
        connection-timeout = 60
        maximum-frame-size = 10485760
        execution-pool-size = 4
      }
    }
  }
}
